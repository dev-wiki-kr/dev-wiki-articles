name: Release

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  release:
    runs-on: ubuntu-latest
    env:  
      API_URL: 'https://devwiki.co.kr'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Get the changed files
      id: changed-files
      env: 
        AUTHOR: ${{ github.event.pull_request.user.login }}
      run: |
        FILES=$(curl -s \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
          | jq -r '[.[] | {filename: .filename, status: .status, contents_url: .contents_url}]')
        echo "$FILES" > changed_files.json

        echo "changed_files.json" | jq -c '.[]' | while read file; do
          FILENAME=$(echo $file | jq -r '.filename')
          STATUS=$(echo $file | jq -r '.status')
          CONTENTS_URL=$(echo $file | jq -r '.contents_url')
          echo "Filename: $FILENAME"
          echo "Status: $STATUS"
          echo "Contents URL: $CONTENTS_URL"

          CONTENT=$(curl -s \
            -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "$CONTENTS_URL")
          echo "Content: $CONTENT"

          if [ $STATUS_CODE = "added" ]; then
            echo "execute"
            curl -X PATCH $API_URL/api/post/$TITLE \
              -H "Content-Type: application/json" \
              -d '{
                "content": "'"${CONTENT}"'",
                "contributor": "'"${AUTHOR}"'"
              }'
          else
            # Article does not exist, send POST request
            curl -X POST $API_URL/api/post \
              -H "Content-Type: application/json" \
              -d '{
                "title": "'"${TITLE}"'",
                "content": "'"${CONTENT}"'",
                "author": "'"${AUTHOR}"'"
              }'
          fi
        done

      # - name: update or post article each files
      #   env:
      #     AUTHOR: ${{ steps.pull-request.outputs.author }}

      #   run: |
      #     for FILE in ${{ steps.files.outputs.changed_files }}; do
      #       # 여기서 filename, status를 api에서 가져오서 처리
      #       # status는 added일때, modified가 존재
      #       if [ -f "$FILE" ]; then
      #         CONTENT=$(cat "$FILE")
      #         TITLE=$(basename "$FILE" .md)

      #         # Check if the article exists
      #         STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $API_URL/articles/$TITLE)

      #         if [ $STATUS_CODE -eq 200 ]; then
      #           # Article exists, send PATCH request
      #           curl -X PATCH $API_URL/articles/$TITLE \
      #             -H "Content-Type: application/json" \
      #             -d '{
      #               "content": "'"${CONTENT}"'",
      #               "contributor": "'"${MERGED_BY}"'"
      #             }'
      #         else
      #           # Article does not exist, send POST request
      #           curl -X POST $API_URL/articles \
      #             -H "Content-Type: application/json" \
      #             -d '{
      #               "title": "'"${TITLE}"'",
      #               "content": "'"${CONTENT}"'",
      #               "author": "'"${AUTHOR}"'"
      #             }'
      #         fi
      #       fi
      #     done


